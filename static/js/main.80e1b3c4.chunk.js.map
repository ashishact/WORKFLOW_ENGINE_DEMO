{"version":3,"sources":["interfaces.ts","example_workflow.ts","App.tsx","HistoryAsCode.tsx","reportWebVitals.ts","index.tsx"],"names":["STATUS","HistoryEventTypeC","t","TemporalHistoryEventC","eventTime","eventType","eventId","details","yamls","rawHistory","history","events","pendingActivities","activityId","activityType","name","state","attempt","maximumAttempts","lastFailure","message","source","scheduledTime","workflowExecutionInfo","startTime","closeTime","status","historyLength","executionTime","push","code","RUNNIG_STATUS","HistoryAsCode","props","editorRef","useRef","text","findActivityDetails","j","find","e","input","payloads","length","pending","pa","JSON","stringify","Name","i","toUpperCase","dayjs","format","scheduledEventId","Array","isArray","Call","Result","Return","result","r","parse","error","current","setValue","width","theme","height","options","minimap","enabled","lineNumbers","readOnly","scrollbar","vertical","defaultLanguage","defaultValue","onMount","editor","monaco","WARN","console","warn","LOG","log","SERVICE_API_ROOT","process","run_s","NONE","App","useState","setHistory","temporalStatus","setTemporalStatus","setStatus","runIds","setRunIds","runWorkflow","a","err","yaml","getValue","url","axios","post","catch","data","success","pollHistory","runId","workflowId","RUNNING","fail","terminateWorkflow","reason","getWorkflowHistory","getWorkflowStatus","id","setInterval","clearInterval","get","h","s","TERMINATED","COMPLETED","FAILED","className","onChange","target","value","example_workflows","map","y","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80e1b3c4.chunk.js","sourcesContent":["import * as t from 'io-ts';\nimport reporter from \"io-ts-reporters\";\nimport json5 from \"json5\"\n\nfunction optional<RT extends t.Any>(\n    type: RT,\n    name: string = `${type.name} | undefined`\n): t.UnionType<\n    [RT, t.UndefinedType],\n    t.TypeOf<RT> | undefined,\n    t.OutputOf<RT> | undefined,\n    t.InputOf<RT> | undefined\n> {\n    return t.union<[RT, t.UndefinedType]>([type, t.undefined], name);\n}\n\nexport async function decode<T, O, I>(\n    validator: t.Type<T, O, I>,\n    input: I | string,\n): Promise<[string | null, T | null]> {\n    if (typeof (input) === \"string\") {\n        try { input = json5.parse(input) }\n        catch (e) { return [\"JSON parsing error\", null] };\n        // input = await Promise.resolve(JSON.parse(input)).catch(e=>error=e);\n    }\n    const result = validator.decode(input as I);\n    if (result._tag === \"Left\") {\n        const error = reporter.report(result).join(\", \");\n        return [error, null];\n    }\n\n    return [null, result.right];\n}\n\n\n// Restruicted Array\n// https://stackoverflow.com/questions/57429769/how-to-validate-array-length-with-io-ts\n/*\ninterface IMinMaxArray<T> extends Array<T> {\n    readonly minMaxArray: unique symbol\n}\nexport const minMaxArray = <C extends t.Mixed>(min: number, max: number, a: C) => t.brand(\n    t.array(a),\n    (n: Array<C>): n is t.Branded<Array<C>, IMinMaxArray<C>> => min < n.length && n.length < max,\n    'minMaxArray'\n);\n*/\n\n\n\nexport enum STATUS {\n    success = \"success\",\n    fail = \"fail\"\n}\nexport const HistoryEventTypeC = t.union([\n    t.literal(\"WorkflowExecutionStarted\"),\n    t.literal(\"WorkflowTaskScheduled\"),\n    t.literal(\"WorkflowTaskStarted\"),\n    t.literal(\"WorkflowTaskCompleted\"),\n    t.literal(\"ActivityTaskScheduled\"),\n    t.literal(\"ActivityTaskStarted\"),\n    t.literal(\"ActivityTaskCompleted\"),\n    t.literal(\"WorkflowExecutionCompleted\"),\n    t.literal(\"WorkflowTaskFailed\"),\n    t.literal(\"ERROR\"),\n]);\nexport type HistoryEventTypeI = t.TypeOf<typeof HistoryEventTypeC>;\n\nexport const TemporalHistoryEventC = t.type({\n        eventTime: t.string,\n        eventType: HistoryEventTypeC,\n        eventId: t.string,\n        details: t.any\n})\n\nexport const TemporalHistoryC = t.type({\n    rawHistory: t.array(t.unknown),\n    history: t.type({\n        events: t.array(TemporalHistoryEventC)\n    })\n});\nexport const TemporalStatusC = t.type({\n    pendingActivities: t.array(t.type({\n        activityId: t.string,\n        activityType: t.type({\n            name: t.string\n        }),\n        state: t.string,\n        attempt: t.number,\n        maximumAttempts: t.number,\n        lastFailure: t.union([\n            t.null,\n            t.type({\n                message: t.string,\n                source: t.string\n            })\n        ]),\n        scheduledTime: t.union([t.string, t.null]),\n    })),\n    workflowExecutionInfo: t.type({\n        startTime: t.string,\n        closeTime: t.union([t.string, t.null]),\n        status: t.string,\n        historyLength: t.string,\n        executionTime: t.string\n    })\n});\n\nexport type TemporalHistoryI = t.TypeOf<typeof TemporalHistoryC>;\nexport type TemporalHistoryEventI = t.TypeOf<typeof TemporalHistoryEventC>;\nexport type TemporalStatusI = t.TypeOf<typeof TemporalStatusC>;","\ninterface WF_YAML {\n    name: string,\n    code: string,\n}\n\nconst yamls:WF_YAML[] = [];\n\n\nyamls.push({name : \"01 - Hello World\", code: `\n# 01 - Hello World\n---\nname: \"Hello World\"\nmain:\n  step_one: \n    return: \"Hello World\"\n`});\n\n\nyamls.push({name : \"02 - Call a activity\", code: `\n# 02 - Call a activity\n---\nname: \"Sleep\"\nmain:\n  step_one: \n    call: sleep\n    args:\n      seconds: 4\n`});\n\n\nyamls.push({name : \"03 - Http Get\", code: `\n# 03 - Http Get\n---\nmain:\n  getDayOfWeek:\n    call: http.get\n    args:\n      url: http://worldclockapi.com/api/json/est/now\n    result: currentTime\n    return: currentTime.dayOfTheWeek\n`});\n\n\nyamls.push({name : \"04 - Assign Variable\", code: `\n# 04 - Assign Variable\nname: \"Assign Variable\"\nmain:\n  step_one:\n    assign:\n      value1: 5\n      value2: value1 + 3\n      value3: \"sum of all = \"\n    return: value3 + value2\n`});\n\n\nyamls.push({name : \"05 - Expression in Arguments\", code: `\n# 05 - Expression in Arguments\nname: \"Expression in arguments\"\nmain:\n  step_zero:\n    assign:\n      key: \"6132d68042e14b1f87e190827210306\"\n      city: \"Tokyo\"\n\n  step_two_getWeather:\n    call: http.get\n    args:\n      url: http://api.weatherapi.com/v1/current.json?key=\\${key}&q=\\${city}\n    result: weather\n    return: Temperature in \\${city} is \\${weather.current.temp_c} deg celcius\n`});\n\n\nyamls.push({name : \"06 - Switch Condition\", code: `\n# 06 - Switch Condition\nname: \"Jump based on switch condition\"\nmain:\n    getCurrentTime:\n        call: http.get\n        args:\n            url: https://us-central1-workflowsample.cloudfunctions.net/datetime\n        result: currentTime\n    conditionalSwitch:\n        switch:\n            - condition: currentTime.dayOfTheWeek == \"Monday\"\n              next: monday\n            - condition: currentTime.dayOfTheWeek == \"Tuesday\"\n              next: tuesday\n            - condition: currentTime.dayOfTheWeek == \"Wednesday\"\n              next: wednesday\n            - condition: currentTime.dayOfTheWeek == \"Thursday\"\n              next: thursday\n            - condition: currentTime.dayOfTheWeek == \"Friday\"\n              next: friday\n            - condition: currentTime.dayOfTheWeek == \"Saturday\" || currentTime.dayOfTheWeek == \"Sunday\"\n              next: weekend\n        next: noday\n    monday:\n        return: \"It's Monday. Make cookies with a smiley faces.\"\n    tuesday:\n        return: \"It's Tuesday. There’s no need to have Pokemon Go, wear a Pikachu pyjamas.\"\n    wednesday:\n        return: \"It's Wednesday. When on a stroll, jump for a photo shot.\"\n    thursday:\n        return: \"It's Thursday. Don’t miss the fun even when you are alone, watch a comedy.\"\n    friday:\n        return: \"It's Friday! Almost the weekend!. Don’t let the rain spoils your fun, have an indoor picnic.\"\n    weekend:\n        return: \"It's the weekend!. Do whatever you want\"\n    noday:\n        return: \"I have no idea what day it is\"\n`});\n\n\nyamls.push({name : \"07 - Match\", code: `\n# 07 - Match\nname: \"Expression in arguments\"\nmain:\n  step_zero:\n    assign:\n      key: \"6132d68042e14b1f87e190827210306\"\n      city: \"Tokyo\"\n\n  step_two_getWeather:\n    call: http.get\n    args:\n      url: http://api.weatherapi.com/v1/current.json?key=\\${key}&q=\\${city}\n    result: weather\n  \n  step_three:\n    match:\n      on: weather.current.temp_c\n      conditions:\n        - (t = )\n`});\n\n\nyamls.push({name : \"08 - Match Expression\", code: `\n# 08 - Match Expression\n---\nname: \"Match Expression\"\nmain:\n  step_zero:\n    call: http.get\n    args:\n      url: http://worldclockapi.com/api/json/est/now\n    result: currentTime\n        \n  step_one: \n    match: \n      on: currentTime.dayOfTheWeek\n      conditions:\n        -  (b = \"Thursday\") => value = 'Yo! Thursday'\n        -  (d = \"Monday\")   => value = 'Monday'\n        -  (x)              => value = \"Unknown Day\"\n  step_two:\n    return: value\n`});\n\n\nyamls.push({name : \"08 - Match Expression Tail\", code: `\n# 08 - Match Expression Tail\n---\nname: \"Match Expression Tail\"\nmain:\n  step_two:\n    assign:\n        person: { name: 'Maria'}\n        ages: [24, 25, 26, 27, 28]\n    match:\n        on: ages\n        conditions:\n            - (x = person)      => value = 1\n            - (a1, a2, rest)    => value = rest\n    return: value\n`});\n\n\nyamls.push({name : \"03 - Check If Valid Date\", code: `\n# 03 - Check If Valid Date\n---\nmain:\n    getDayOfWeek:\n        call: http.get\n        args:\n            url: http://worldclockapi.com/api/json/est/now\n        result: currentTime\n    check:\n        match:\n            on: new Date(currentTime.currentDateTime)\n            conditions:\n                - (d = Date) => value = d\n                - (x)        => value = false\n        return: value\n    step3:\n        switch:\n            - condition: value\n              next: date\n        next: nodate\n    date:\n        return: \"Yes it's a date\"\n    nodate:\n        return: \"Not a date\"\n`});\n\n\nyamls.push({name : \"02 - Timeout\", code: `\n# 02 - Timeout\n---\nname: \"Sleep\"\ntimeout: 5\nmain:\n  step_one: \n    call: sleep\n    args:\n      seconds: 10\n`});\n\n\nyamls.push({name : \"- Retry whne service unavailable\", code: `\n# - Retry whne service unavailable\n`});\n\n\nexport default {yamls}","import './App.css';\nimport React, {\n    useState, \n    useRef, \n    useEffect\n}                           from 'react';\n\nimport Editor               from \"@monaco-editor/react\";\nimport axios, {\n    AxiosResponse\n}                           from \"axios\";\n\nimport {\n    getRunninWorkflows\n}                           from \"./temporalApi\"\n\nimport {\n    STATUS, decode, \n    TemporalHistoryC,\n    TemporalHistoryEventI,\n    TemporalStatusC,\n    TemporalStatusI,\n    HistoryEventTypeI,\n    TemporalHistoryI\n}                           from \"./interfaces\";\nimport example_workflows    from \"./example_workflow\";\n\n\n\n\nimport History              from \"./History\";\nimport HistoryAsCode        from \"./HistoryAsCode\";\nimport TaskTable            from  \"./TaskTable\"\nimport PendingActivity      from \"./PendingActivity\";\n\n\nconst WARN  = console.warn;\nconst LOG   = console.log;\n\nconst SERVICE_API_ROOT = process.env.REACT_APP_WFE_API_SERVER_ROOT || \"http://localhost:3014/api/v1\";\n\ninterface StatusI{\n    id: string,\n    type: string,\n    time: string\n}\nenum RUNNIG_STATUS {\n    NONE,\n    RUNNING,\n    FAILED,\n    COMPLETED,\n    TERMINATED\n}\n\nlet run_s:RUNNIG_STATUS = RUNNIG_STATUS.NONE;\n\nfunction App() {\n\n    const editorRef = useRef<any>(null);\n    const [history, setHistory] = useState<TemporalHistoryI|null>(null);\n    const [temporalStatus, setTemporalStatus] = useState<TemporalStatusI|null>(null);\n\n    const [status, setStatus] = useState<RUNNIG_STATUS>(RUNNIG_STATUS.NONE);\n    const [runIds, setRunIds] = useState<any>(null);\n    const [pending, setPending] = useState<string[]>([]);\n\n\n    const handleEditorDidMount = (editor:any , monaco: any) => {\n        editorRef.current = editor; \n        // console.log(editor, monaco);\n    }\n\n    const getCode = (): string|null => {\n        if(!editorRef.current) return null;\n        return editorRef.current.getValue();\n    }\n\n\n    const runWorkflow = async (): Promise<string|boolean> =>{\n        let err = null;\n\n        const yaml = getCode();\n        if(!yaml) return false;\n        \n        const url = `${SERVICE_API_ROOT}/workflow/${1}/run`;\n        const r:AxiosResponse<any>|null = await axios.post(url, {yaml}).catch(e=>err=e);\n        if(!r || err){\n            WARN(err);\n            return false;\n        }\n        \n        setHistory(null);\n\n        LOG(r);\n        if(r.data.status === STATUS.success){\n            if(r.data.data?.length){\n                let data = r.data.data[0];\n                if(data){\n                    setRunIds(data);\n                    pollHistory(data.runId, data.workflowId); // Pass the ID\n                    setStatus(RUNNIG_STATUS.RUNNING);\n                }\n            }\n        }\n        else if(r.data.status === STATUS.fail){\n            // setWfState(\"FAILED: \" + r.data.errors);\n        }\n\n        return true;\n    }\n\n    const terminateWorkflow = async (): Promise<string|boolean> =>{\n        if(!runIds) return false;\n\n        let err = null;\n\n    \n        const url = `${SERVICE_API_ROOT}/workflow/${runIds.workflowId}/${runIds.runId}/terminate`;\n        let reason = \"FROM UI\";\n        const r:AxiosResponse<any>|null = await axios.post(url, {reason}).catch(e=>err=e);\n        if(!r || err){\n            WARN(err);\n            return false;\n        }\n\n        LOG(r);\n        if(r.data.status === STATUS.success){\n        }\n        else if(r.data.status === STATUS.fail){\n        }\n\n        return true;\n    }\n\n    const pollHistory = async (runId: string, workflowId: string) => {\n        getWorkflowHistory(runId, workflowId);\n        getWorkflowStatus(runId, workflowId);\n\n        let id = setInterval(()=>{\n            getWorkflowHistory(runId, workflowId);\n            getWorkflowStatus(runId, workflowId);\n\n            if(run_s !== RUNNIG_STATUS.RUNNING){\n                clearInterval(id);\n            }\n            else{\n                console.log(status)\n            }\n        }, 1000);\n    }\n\n    const getWorkflowHistory = async (runId: string, workflowId: string) =>{\n        let err = null;\n        const url = `${SERVICE_API_ROOT}/workflow/${workflowId}/${runId}/history`;\n        const r:AxiosResponse<any>|null = await axios.get(url).catch(e=>err=e);\n        if(!r || err){\n            WARN(err);\n            return false;\n        }\n\n        if(r.data.status === STATUS.success){\n            // setStatus(JSON.stringify(r.data.data, null, 2));\n            if(r.data.data?.length){\n                let h = r.data.data[0];\n                if(h){\n                    setHistory(h);\n                }\n            }\n        }\n        return;\n    }\n    const getWorkflowStatus = async (runId: string, workflowId: string) =>{\n        let err = null;\n        const url = `${SERVICE_API_ROOT}/workflow/${workflowId}/${runId}/status`;\n        const r:AxiosResponse<any>|null = await axios.get(url).catch(e=>err=e);\n        if(!r || err){\n            WARN(err);\n            return false;\n        }\n\n        if(r.data.status === STATUS.success){\n            if(r.data.data?.length){\n                let s = r.data.data[0];\n                // let [e, s] = await decode(TemporalStatusC, data);\n                if(s){\n                    setTemporalStatus(s);\n                    // console.log(\"status is: \", s.workflowExecutionInfo.status);\n                    if(s.workflowExecutionInfo.status === \"Running\"){\n                        setStatus(RUNNIG_STATUS.RUNNING);\n                        run_s = RUNNIG_STATUS.RUNNING;\n                    }\n                    else if(s.workflowExecutionInfo.status === \"Terminated\"){\n                        setStatus(RUNNIG_STATUS.TERMINATED);\n                        run_s = RUNNIG_STATUS.TERMINATED;\n                    }\n                    else if(s.workflowExecutionInfo.status === \"Completed\"){\n                        setStatus(RUNNIG_STATUS.COMPLETED)\n                        run_s = RUNNIG_STATUS.COMPLETED;\n                    }\n                    else if(s.workflowExecutionInfo.status === \"Failed\"){\n                        setStatus(RUNNIG_STATUS.FAILED);\n                        run_s = RUNNIG_STATUS.FAILED;\n                    }\n                    else {\n                        console.error(\"Handle workflowExecutionInfo.status= \"+ s.workflowExecutionInfo.status)\n                    }\n                }\n            }\n        }\n        return;\n    }\n\n\n    const yamlSelected = (e: any)=>{\n        if(!editorRef.current) return;\n\n        let i = e.target.value;\n        let yamls = example_workflows.yamls;\n        if(i < yamls.length ){\n            editorRef.current.setValue(yamls[i].code);\n        }\n    }\n\n    \n\n    return (\n        <div className=\"container mx-auto\">\n            <div className=\"grid grid-cols-3 text-center pt-1 pl-1\">\n                <select className=\"col-span-2 bg-gray-500 text-white active:bg-pink-300 font-bold uppercase text-sm rounded shadow hover:shadow-lg outline-none focus:outline-none pl-4 mr-1 mb-1 ease-linear transition-all duration-150\"\n                onChange={yamlSelected}\n                >\n                    {\n                        example_workflows.yamls.map((y, i)=>(\n                            <option key={i} value={i}>{y.name}</option>\n                        ))\n                    }\n                </select>\n\n\n                {\n                    (status !== RUNNIG_STATUS.RUNNING) && \n                    <button className=\"col-span-1 bg-green-500 text-white active:bg-pink-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\" type=\"button\" onClick={runWorkflow}>Run</button>\n                }\n\n                {\n                    (status === RUNNIG_STATUS.RUNNING) && \n                    <button className=\"col-span-1 bg-pink-500 text-white active:bg-pink-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\" type=\"button\" onClick={terminateWorkflow}>Terminate</button>\n\n                }\n                \n            </div>\n                \n            <div className=\"grid grid-cols-2\">\n                <div className=\"container mx-auto\">\n                    <Editor\n                        options={{\n                            scrollbar: {\n                                vertical: 'hidden'\n                            },\n                        }}\n                        theme=\"vs-dark\"\n                        height=\"100vh\"\n                        defaultLanguage=\"yaml\"\n                        defaultValue={example_workflows.yamls[0].code}\n                        onMount={handleEditorDidMount}/>\n                        \n                \n                </div>\n\n\n                \n                <div className=\"container mx-auto p-0\">\n                    <HistoryAsCode history={history} status={temporalStatus}></HistoryAsCode>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport Editor               from \"@monaco-editor/react\";\n\nimport dayjs from 'dayjs'\n\nimport {HistoryEventTypeI, TemporalHistoryI, TemporalStatusI}  from \"./interfaces\";\n\n\ninterface Props {\n    history: TemporalHistoryI|null,\n    status: TemporalStatusI|null\n}\nconst HistoryAsCode = (props: Props) => {\n    const {history, status} = props;\n\n\n    const editorRef = useRef<any>(null);\n    const handleEditorDidMount = (editor:any , monaco: any) => {\n        editorRef.current = editor; \n    }\n    let text = `START LOGS\\n`;\n\n\n    const findActivityDetails = (eventId: string):any => {\n        if(!history) return null;\n\n        let j = null;\n        history.history.events.find(e=>{\n            if(e.eventId === eventId && e.eventType === \"ActivityTaskScheduled\"){\n                j = e.details?.input?.payloads;\n                if(j){\n                    return true;\n                }\n            }\n        });\n\n        return j;\n    }\n\n    if(status){\n        if(status.pendingActivities?.length){\n            let pending = \"\";\n            for(let pa of status.pendingActivities){\n\n                pending += \"PENDING => \" + JSON.stringify({\n                    Name: pa.activityType?.name,\n                    scheduledTime: pa.scheduledTime,\n                    lastFailure: {\n                        message: pa.lastFailure?.message\n                    },\n                    attempt: pa.attempt,\n                    maximumAttempts: pa.maximumAttempts,\n                }, null, 2) + \"\\n\";\n            }\n\n            if(pending){\n                text += pending;\n            }\n        }\n\n        if(status.workflowExecutionInfo){\n            text += \"\\n\\n=======================\\n\";\n            let i = status.workflowExecutionInfo;\n            let j = {\n                executionTime: i.executionTime,\n                status: i.status.toUpperCase(),\n                startTime: i.startTime,\n                closeTime: i.closeTime,\n            }\n            text += \"EXECUTION INFO => \" + JSON.stringify(j, null, 2);\n        }\n    }\n\n    text += \"\\n=======================\\n\\n\";\n\n    if(history){\n        for(let e of history.history.events){\n            let t = null;\n            if(e.eventType === \"ActivityTaskStarted\"){\n                t = dayjs(e.eventTime).format(\"YY MMM DD, HH:mm:ss\")  + \" : [ActivityStarted] => \";\n                let j = findActivityDetails(e.details.scheduledEventId);\n                if(j){\n                    if(Array.isArray(j) && j.length) j = j[0];\n                    let {Name, Call, Result, Return} = j;\n                    t += JSON.stringify({Name, Call, Result, Return}, null, 2) + \"\\n\";\n                }\n                else{\n                    t += JSON.stringify(e, null, 2) + \"\\n\";\n                }\n            }\n            else if(e.eventType === \"ActivityTaskCompleted\"){\n                t = dayjs(e.eventTime).format(\"YY MMM DD, HH:mm:ss\") + \" : [ActivityCompleted] => \";\n                let j = findActivityDetails(e.details.scheduledEventId);\n                if(j){\n                    if(Array.isArray(j) && j.length) j = j[0];\n                    j = {\n                        Name: j.Name,\n                        Call: j.Call,\n                        Result: e.details?.result?.payloads\n                    }\n                    try {\n                        let r = JSON.parse(j.Result);\n                        j.Result = r;\n                    } catch (error) {}\n                    t += JSON.stringify(j, null, 2) + \"\\n\";\n                }\n                else{\n                    t += JSON.stringify(e, null, 2) + \"\\n\";\n                }\n            }\n            else if(e.eventType === \"WorkflowExecutionCompleted\"){\n                t = dayjs(e.eventTime).format(\"YY MMM DD, HH:mm:ss\") + \" : [WorkflowExecutionCompleted] => \";\n\n                let result = e.details?.result?.payloads;\n                if(result){\n                    t += JSON.stringify({result}, null, 2) + \"\\n\";\n                }\n                else{\n                    t += JSON.stringify(e, null, 2) + \"\\n\";\n                }\n            }\n            if(t) text += t + \"\\n\";\n        }\n    }\n\n\n    if(status){\n        text += \"\\n\\n=======================\\n\";\n        text += \"FULL STATUS => \" + JSON.stringify(status, null, 2);\n    }\n\n\n    if(history){\n        text += \"\\n\\n=======================\\n\";\n        text += \"FULL HISTORY => \";\n        text +=  JSON.stringify(history, null, 2);\n    }\n\n\n    if(editorRef.current){\n        editorRef.current.setValue(text);\n    }\n\n    return (\n        <Editor\n            width=\"100%\"\n            theme=\"vs-dark\"\n            height=\"100vh\"\n            options={{\n                minimap: {\n                    enabled: false,\n                },\n                lineNumbers: \"off\",\n                readOnly: true,\n                scrollbar: {\n                    vertical: 'hidden'\n                },\n            }}\n            defaultLanguage=\"typescript\"\n            defaultValue={text}\n            onMount={handleEditorDidMount}/>\n\n    )\n}\n\nexport default HistoryAsCode;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}